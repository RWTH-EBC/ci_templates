name: Release to PyPI

on:
  workflow_call:
    inputs:
      PYTHON_VERSION:
        required: true
        type: string
        default: "3.10"
      USE_UV:
        required: false
        type: boolean
        default: false
      INSTALL_REQUIREMENTS:
        required: false
        type: boolean
        default: true
      EXTRA_REQUIREMENTS:
        required: false
        type: string
        default: ""
      PYTHON_PACKAGE_NAME:
        required: false  # Geändert von true zu false
        type: string
        default: ""      # Hinzugefügt: leer wenn nicht gesetzt
      PYTHON_VERSION_NAME:
        required: false
        type: string
        default: "__version__"
      GIT_REPO:
        required: false
        type: string
        default: ""
      PYPI_RELEASE:
        required: false
        type: boolean
        default: false

    secrets:
      PYPI_PASSWORD:
        required: true
      GH_TOKEN:
        required: true

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.head_commit.message, 'PYPI-RELEASE') &&  success() && inputs.PYPI_RELEASE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.PYTHON_VERSION }}

      - name: Determine Python package name
        id: package-name
        run: |
          PACKAGE_NAME="${{ inputs.PYTHON_PACKAGE_NAME }}"
          if [ -z "$PACKAGE_NAME" ]; then
            PACKAGE_NAME=$(basename $GITHUB_REPOSITORY)
            echo "Auto-detected package name from repository: $PACKAGE_NAME"
          else
            echo "Using provided package name: $PACKAGE_NAME"
          fi
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV

      - name: Install project
        uses: RWTH-EBC/ci_templates/.github/actions/install@main
        with:
          use-uv: ${{ inputs.USE_UV }}
          install-requirements: ${{ inputs.INSTALL_REQUIREMENTS }}
          extra-requirements: ${{ inputs.EXTRA_REQUIREMENTS }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install twine build

      - name: Install GitHub CLI
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gh

      - name: Build Python package
        run: python -m build

      - name: Install built package and get version
        id: version
        run: |
          FILE=$(echo dist/*.tar.gz)
          echo "Installing package: $FILE"
          pip install "$FILE"
          
          # Show what we're trying to import
          echo "Attempting to import package: ${{ steps.package-name.outputs.package_name }}"
          
          # Try to get version from the installed package
          if python -c "import ${{ steps.package-name.outputs.package_name }}" 2>/dev/null; then
            echo "✓ Package import successful"
            VERSION=$(python -c "import ${{ steps.package-name.outputs.package_name }}; print(getattr(${{ steps.package-name.outputs.package_name }}, '${{ inputs.PYTHON_VERSION_NAME }}', 'unknown'))")
            if [ "$VERSION" = "unknown" ]; then
              echo "Warning: Could not find version attribute '${{ inputs.PYTHON_VERSION_NAME }}' in package"
              # Fallback: try to extract version from setup.py or pyproject.toml
              if [ -f "setup.py" ]; then
                VERSION=$(python setup.py --version 2>/dev/null || echo "0.0.0")
                echo "Using version from setup.py: $VERSION"
              elif [ -f "pyproject.toml" ]; then
                VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb')).get('project', {}).get('version', '0.0.0'))" 2>/dev/null || echo "0.0.0")
                echo "Using version from pyproject.toml: $VERSION"
              else
                VERSION="0.0.0"
                echo "Using fallback version: $VERSION"
              fi
            else
              echo "Found version attribute: $VERSION"
            fi
          else
            echo "Could not import package ${{ steps.package-name.outputs.package_name }}"
            # Fallback to setup.py/pyproject.toml
            if [ -f "setup.py" ]; then
              VERSION=$(python setup.py --version 2>/dev/null || echo "0.0.0")
              echo "Fallback: Using version from setup.py: $VERSION"
            elif [ -f "pyproject.toml" ]; then
              VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb')).get('project', {}).get('version', '0.0.0'))" 2>/dev/null || echo "0.0.0")
              echo "Fallback: Using version from pyproject.toml: $VERSION"
            else
              echo "Error: Could not determine version"
              exit 1
            fi
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Final detected version: $VERSION"

      - name: Verify version is not empty
        run: |
          if [ -z "${{ steps.version.outputs.version }}" ] || [ "${{ steps.version.outputs.version }}" = "unknown" ]; then
            echo "Error: Could not determine package version"
            exit 1
          fi

      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Check if release already exists
          if gh release view "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "Release v${{ steps.version.outputs.version }} already exists"
          else
            echo "Creating release v${{ steps.version.outputs.version }}"
            gh release create "v${{ steps.version.outputs.version }}" \
              --title "v${{ steps.version.outputs.version }}" \
              --generate-notes \
              dist/*
          fi

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          echo "Uploading to PyPI..."
          twine upload dist/* -u $TWINE_USERNAME -p $TWINE_PASSWORD