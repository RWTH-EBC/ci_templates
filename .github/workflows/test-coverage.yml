name: Coverage Tests

on:
  workflow_call:
    inputs:
      PYTHON_VERSION:
        required: true
        type: string
        default: "3.10"
      TEST_ENGINE:
        required: false
        type: string
        default: "PYTEST"
      TEST_PATH:
        required: false
        type: string
        default: "tests"
      COVERAGE_TYPE:
        required: false
        type: string
        default: "default"
      EXTRA_REQUIREMENTS:
        required: false
        type: string
        default: ""
      INSTALL_REQUIREMENTS:
        required: false
        type: boolean
        default: true
      USE_UV:
        required: false
        type: boolean
        default: false
      PYTHON_PACKAGE_NAME:
        required: false
        type: string
        default: ""
      USE_DYMOLA:
        required: false
        type: boolean
        default: false

jobs:
  coverage:
    if: ${{ !inputs.USE_DYMOLA }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.PYTHON_VERSION }}

      - name: Install Project and Requirements
        uses: RWTH-EBC/ci_templates/.github/actions/install@main
        with:
          use-uv: ${{ inputs.USE_UV }}
          install-requirements: ${{ inputs.INSTALL_REQUIREMENTS }}
          extra-requirements: ${{ inputs.EXTRA_REQUIREMENTS }}

      - name: Install test dependencies
        run: |
          pip install "coverage<7.5.0" "coverage-badge<=1.1.0" pytest setuptools

      - name: Run tests with coverage
        run: |
          if [ "${{ inputs.TEST_ENGINE }}" == "PYTEST" ]; then
            coverage run -m pytest ${{ inputs.TEST_PATH }}/
          else
            coverage run -m unittest discover --verbose ${{ inputs.TEST_PATH }}/ "test_*.py"
          fi

      - name: Generate coverage report and badge
        run: |
          mkdir -p coverage
          coverage html -d coverage
          coverage-badge -o coverage/badge.svg

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
          retention-days: 1

  dymola_coverage:
    if: ${{ inputs.USE_DYMOLA }}
    runs-on: [dymola]
    container:
      image: localhost:5000/dymola-extended:latest
      options: >-
        --user root
        --privileged
        --volume /tmp/.X11-unix:/tmp/.X11-unix:rw
        --volume /dev/shm:/dev/shm
      env:
        DISPLAY: ":77.0"

    steps:
      - name: Setup container environment
        shell: bash
        run: |
          echo "Setting up container environment"
          
          # Create necessary directories
          mkdir -p /github/workspace
          mkdir -p /github/workflow  
          mkdir -p /__w/_temp
          
          # Setup display
          Xvfb :77 -extension RANDR -extension GLX &
          export DISPLAY=:77.0
          
          # Verify environment
          echo "Environment verification:"
          echo "Node.js: $(node --version)"
          echo "Working directory: $(pwd)"
          echo "User: $(whoami)"

      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python environment
        shell: bash
        run: |
          echo "Setting up Python environment with Conda"
          source /opt/conda/etc/profile.d/conda.sh
          
          PY_VER=$(echo "${{ inputs.PYTHON_VERSION }}" | grep -oE '[0-9]+\.[0-9]+')
          echo "Creating environment with Python $PY_VER"
          
          conda create -n pyCITest python=$PY_VER -y
          conda activate pyCITest
          
          echo "Python environment ready:"
          python --version
          which python

      - name: Install dependencies
        shell: bash
        run: |
          source /opt/conda/etc/profile.d/conda.sh
          conda activate pyCITest
          
          # Install project requirements
          if [ -f requirements.txt ] && [ "${{ inputs.INSTALL_REQUIREMENTS }}" == "true" ]; then
            echo "Installing requirements.txt"
            pip install -r requirements.txt
          fi
          
          # Install project in editable mode
          if [ -f setup.py ] || [ -f pyproject.toml ]; then
            echo "Installing project"
            pip install -e .${{ inputs.EXTRA_REQUIREMENTS }}
          fi
          
          # Install test dependencies
          echo "Installing test dependencies"
          pip install "coverage<7.5.0" "coverage-badge<=1.1.0" pytest

      - name: Run coverage tests
        shell: bash
        run: |
          source /opt/conda/etc/profile.d/conda.sh
          conda activate pyCITest
          export DISPLAY=:77.0
          
          echo "Running tests with coverage"
          
          if [ "${{ inputs.TEST_ENGINE }}" == "PYTEST" ]; then
            echo "Using pytest"
            coverage run -m pytest ${{ inputs.TEST_PATH }}/ || echo "Tests completed with issues"
          else
            echo "Using unittest"
            coverage run -m unittest discover --verbose ${{ inputs.TEST_PATH }}/ "test_*.py" || echo "Tests completed with issues"
          fi

      - name: Generate coverage reports
        shell: bash
        run: |
          source /opt/conda/etc/profile.d/conda.sh
          conda activate pyCITest
          
          echo "Generating coverage reports"
          mkdir -p coverage
          coverage html -d coverage
          coverage-badge -o coverage/badge.svg
          
          echo "Coverage files generated:"
          ls -la coverage/

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
          retention-days: 1